;; Analyzed by ClojureScript 1.8.34
{:use-macros nil, :excludes #{}, :name flow.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {draw-state {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 59, :column 7, :end-line 59, :end-column 17, :arglists (quote ([state]))}, :name flow.core/draw-state, :variadic false, :file "src\\flow\\core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, clamp {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 43, :column 7, :end-line 43, :end-column 12, :arglists (quote ([a min-a max-a])), :doc "Clamp a to (min-a, max-x)"}, :name flow.core/clamp, :variadic false, :file "src\\flow\\core.cljs", :end-column 12, :method-params ([a min-a max-a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a min-a max-a])), :doc "Clamp a to (min-a, max-x)"}, genfish {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 17, :column 7, :end-line 17, :end-column 14, :arglists (quote ([]))}, :name flow.core/genfish, :variadic false, :file "src\\flow\\core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 20, :column 7, :end-line 20, :end-column 19, :arglists (quote ([state]))}, :name flow.core/update-state, :variadic false, :file "src\\flow\\core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, tickfish {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 36, :column 7, :end-line 36, :end-column 15, :arglists (quote ([fish f]))}, :name flow.core/tickfish, :variadic false, :file "src\\flow\\core.cljs", :end-column 15, :method-params ([fish f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fish f]))}, tick {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 27, :column 7, :end-line 27, :end-column 11, :arglists (quote ([fish]))}, :name flow.core/tick, :variadic false, :file "src\\flow\\core.cljs", :end-column 11, :method-params ([fish]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fish]))}, flow {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 80, :column 14, :end-line 80, :end-column 18, :export true, :arglists (quote ([]))}, :name flow.core/flow, :variadic false, :file "src\\flow\\core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dxf {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([a b]))}, :name flow.core/dxf, :variadic false, :file "src\\flow\\core.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, setup {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 6, :column 7, :end-line 6, :end-column 12, :arglists (quote ([]))}, :name flow.core/setup, :variadic false, :file "src\\flow\\core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, grow {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 30, :column 7, :end-line 30, :end-column 11, :arglists (quote ([fish]))}, :name flow.core/grow, :variadic false, :file "src\\flow\\core.cljs", :end-column 11, :method-params ([fish]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fish]))}, abs {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 41, :column 7, :end-line 41, :end-column 10, :arglists (quote ([n]))}, :name flow.core/abs, :variadic false, :file "src\\flow\\core.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, drawfish {:protocol-inline nil, :meta {:file "C:\\Users\\maxbi\\workspace\\magicQuil\\flow\\src\\flow\\core.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([f]))}, :name flow.core/drawfish, :variadic false, :file "src\\flow\\core.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :hsb :fn :color :update :angle :s :size :setup :middleware :host :fish :host-id :no-start :x :draw}, :order [:hsb :color :fish :x :y :s :angle :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}